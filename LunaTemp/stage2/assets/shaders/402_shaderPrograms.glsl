["\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nattribute mediump vec4 in_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec3 vs_TEXCOORD6;\nvarying highp float vs_TEXCOORD8;\nvarying mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat3;\n    vs_TEXCOORD8 = u_xlat3.z * unity_FogParams.z + unity_FogParams.w;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? -1 : 0);\n    u_xlati0 = int((u_xlat0.x<0.0) ? -1 : 0);\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_COLOR0;\nvarying highp float vs_TEXCOORD8;\nvarying mediump vec3 vs_TEXCOORD7;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec4 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nmediump float u_xlat16_15;\nvec2 u_xlat16;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0.x) + 0.5;\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.x);\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;\n    u_xlat7 = _OutlineWidth * _ScaleRatioA;\n    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;\n    u_xlat16_15 = min(u_xlat7, 1.0);\n    u_xlat16_15 = sqrt(u_xlat16_15);\n    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat10_0.xyz * _OutlineColor.xyz;\n    u_xlat2 = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat9 = u_xlat10_0.w * u_xlat2;\n    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat10_3 = texture2D(_FaceTex, u_xlat16.xy);\n    u_xlat4 = vs_COLOR0 * _FaceColor;\n    u_xlat5 = u_xlat10_3 * u_xlat4;\n    u_xlat16_6.xyz = u_xlat5.www * u_xlat5.xyz;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat9) + (-u_xlat16_6.xyz);\n    u_xlat16_6.w = u_xlat2 * u_xlat10_0.w + (-u_xlat5.w);\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;\n    u_xlat16_2.w = u_xlat4.w * u_xlat10_3.w + u_xlat16_0.w;\n    u_xlat16_2.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat16_0.xyz;\n    u_xlat3.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat3.x * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat3.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;\n    u_xlat3.x = max(u_xlat16_0.w, 9.99999975e-05);\n    u_xlat3.xyz = u_xlat16_0.xyz / u_xlat3.xxx;\n    SV_Target0.w = u_xlat16_0.w;\n    u_xlat4.x = vs_TEXCOORD2.z;\n    u_xlat4.y = vs_TEXCOORD3.z;\n    u_xlat4.z = vs_TEXCOORD4.z;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_1.yzw);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_8.xyz = u_xlat3.xyz * u_xlat4.xyz;\n    u_xlat16_6.xyz = u_xlat3.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;\n    u_xlat3.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);\n    u_xlat24 = vs_TEXCOORD8;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat3.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tfloat _FaceDilate;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nin mediump vec4 in_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR0;\nout highp vec3 vs_TEXCOORD6;\nout highp float vs_TEXCOORD8;\nout mediump vec3 vs_TEXCOORD7;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nint u_xlati0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat4;\nmediump float u_xlat16_5;\nmediump vec3 u_xlat16_6;\nint u_xlati7;\nvec3 u_xlat9;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat22;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat3;\n    vs_TEXCOORD8 = u_xlat3.z * unity_FogParams.z + unity_FogParams.w;\n    u_xlat21 = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat3.x = floor(u_xlat21);\n    u_xlat3.y = (-u_xlat3.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat3.xy = u_xlat3.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD0.zw = u_xlat3.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD1.xy = u_xlat3.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlatb21 = 0.0>=in_TEXCOORD1.y;\n    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);\n    u_xlat22 = (-_WeightNormal) + _WeightBold;\n    u_xlat21 = u_xlat21 * u_xlat22 + _WeightNormal;\n    u_xlat21 = u_xlat21 * 0.25 + _FaceDilate;\n    u_xlat21 = u_xlat21 * _ScaleRatioA;\n    vs_TEXCOORD5.x = u_xlat21 * 0.5;\n    u_xlat21 = u_xlat2.y * hlslcc_mtx4x4unity_MatrixVP[1].w;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[0].w * u_xlat2.x + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[2].w * u_xlat2.z + u_xlat21;\n    u_xlat21 = hlslcc_mtx4x4unity_MatrixVP[3].w * u_xlat2.w + u_xlat21;\n    u_xlat2.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat2.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat2.xy;\n    u_xlat2.xy = u_xlat2.xy * vec2(_ScaleX, _ScaleY);\n    u_xlat2.xy = vec2(u_xlat21) / u_xlat2.xy;\n    u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat22 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat2.x = _Sharpness + 1.0;\n    u_xlat22 = u_xlat22 * u_xlat2.x;\n    u_xlat2.x = u_xlat21 * u_xlat22;\n    u_xlat9.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = u_xlat9.x * u_xlat2.x;\n    u_xlat21 = u_xlat21 * u_xlat22 + (-u_xlat2.x);\n    u_xlat9.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat9.xyz;\n    u_xlat9.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat9.xyz;\n    u_xlat9.xyz = u_xlat9.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;\n    u_xlat0.z = in_POSITION0.z;\n    u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat9.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, u_xlat0.xyz);\n    u_xlati7 = int((0.0<u_xlat0.x) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = int((u_xlat0.x<0.0) ? 0xFFFFFFFFu : uint(0));\n    u_xlati0 = (-u_xlati7) + u_xlati0;\n    u_xlat0.x = float(u_xlati0);\n    u_xlat0.xyz = u_xlat0.xxx * in_NORMAL0.xyz;\n    u_xlat3.x = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(u_xlat0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;\n    u_xlat0.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat22 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat22 = inversesqrt(u_xlat22);\n    u_xlat9.xyz = u_xlat0.xyz * vec3(u_xlat22);\n    u_xlat22 = dot(u_xlat3.xyw, u_xlat9.xyz);\n    vs_TEXCOORD5.y = abs(u_xlat22) * u_xlat21 + u_xlat2.x;\n    vs_TEXCOORD2.w = u_xlat1.x;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;\n    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);\n    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;\n    u_xlat4.xyz = vec3(u_xlat21) * u_xlat4.xyz;\n    vs_TEXCOORD2.y = u_xlat4.x;\n    vs_TEXCOORD2.z = u_xlat3.x;\n    vs_TEXCOORD2.x = u_xlat2.z;\n    vs_TEXCOORD3.x = u_xlat2.x;\n    vs_TEXCOORD4.x = u_xlat2.y;\n    vs_TEXCOORD3.w = u_xlat1.y;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    vs_TEXCOORD3.z = u_xlat3.y;\n    vs_TEXCOORD3.y = u_xlat4.y;\n    vs_TEXCOORD4.y = u_xlat4.z;\n    vs_TEXCOORD4.z = u_xlat3.w;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat0.zzz + u_xlat0.xyw;\n    u_xlat16_5 = u_xlat3.y * u_xlat3.y;\n    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);\n    u_xlat16_0 = u_xlat3.ywzx * u_xlat3;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD1;\nin highp vec2 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_COLOR0;\nin highp float vs_TEXCOORD8;\nin mediump vec3 vs_TEXCOORD7;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nfloat u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec4 u_xlat16_6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nmediump float u_xlat16_15;\nvec2 u_xlat16;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat16_0.x) + 0.5;\n    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.x);\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y + 0.5;\n    u_xlat7 = _OutlineWidth * _ScaleRatioA;\n    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat7 * 0.5 + u_xlat0.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_8.x = (-u_xlat7) * 0.5 + u_xlat0.x;\n    u_xlat16_15 = min(u_xlat7, 1.0);\n    u_xlat16_15 = sqrt(u_xlat16_15);\n    u_xlat16_1.x = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD1.xy;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_0.xyz * _OutlineColor.xyz;\n    u_xlat2 = vs_COLOR0.w * _OutlineColor.w;\n    u_xlat9 = u_xlat16_0.w * u_xlat2;\n    u_xlat16.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;\n    u_xlat16_3 = texture(_FaceTex, u_xlat16.xy);\n    u_xlat4 = vs_COLOR0 * _FaceColor;\n    u_xlat5 = u_xlat16_3 * u_xlat4;\n    u_xlat16_6.xyz = u_xlat5.www * u_xlat5.xyz;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat9) + (-u_xlat16_6.xyz);\n    u_xlat16_6.w = u_xlat2 * u_xlat16_0.w + (-u_xlat5.w);\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_6;\n    u_xlat16_2.w = u_xlat4.w * u_xlat16_3.w + u_xlat16_0.w;\n    u_xlat16_2.xyz = u_xlat5.xyz * u_xlat5.www + u_xlat16_0.xyz;\n    u_xlat3.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat10 = u_xlat3.x * vs_TEXCOORD5.y;\n    u_xlat16_1.x = u_xlat3.x * vs_TEXCOORD5.y + 1.0;\n    u_xlat16_8.x = u_xlat10 * 0.5 + u_xlat16_8.x;\n    u_xlat16_1.x = u_xlat16_8.x / u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_2;\n    u_xlat3.x = max(u_xlat16_0.w, 9.99999975e-05);\n    u_xlat3.xyz = u_xlat16_0.xyz / u_xlat3.xxx;\n    SV_Target0.w = u_xlat16_0.w;\n    u_xlat4.x = vs_TEXCOORD2.z;\n    u_xlat4.y = vs_TEXCOORD3.z;\n    u_xlat4.z = vs_TEXCOORD4.z;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.yzw = u_xlat16_6.xyz + vs_TEXCOORD7.xyz;\n    u_xlat16_1 = max(u_xlat16_1, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_1.yzw);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_8.xyz = u_xlat3.xyz * u_xlat4.xyz;\n    u_xlat16_6.xyz = u_xlat3.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xxx + u_xlat16_8.xyz;\n    u_xlat3.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);\n    u_xlat24 = vs_TEXCOORD8;\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat3.xyz;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _ScaleRatioA;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD3;\nvarying highp float vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat4;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat4 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat4);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat4) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;\n    vs_TEXCOORD2 = u_xlat0.x * 0.5;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp float vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nlowp float u_xlat10_0;\nbool u_xlatb0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy).w;\n    u_xlat0 = u_xlat10_0 + (-vs_TEXCOORD2);\n    u_xlatb0 = u_xlat0<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 unity_LightShadowBias;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _ScaleRatioA;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD3;\nout highp float vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat4;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat4 = u_xlat0.z + u_xlat1.x;\n    u_xlat1.x = max((-u_xlat0.w), u_xlat4);\n    gl_Position.xyw = u_xlat0.xyw;\n    u_xlat0.x = (-u_xlat4) + u_xlat1.x;\n    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD3.xy = in_TEXCOORD0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;\n    vs_TEXCOORD2 = u_xlat0.x * 0.5;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD1;\nin highp float vs_TEXCOORD2;\nlayout(location = 0) out highp vec4 SV_Target0;\nfloat u_xlat0;\nmediump float u_xlat16_0;\nbool u_xlatb0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;\n    u_xlat0 = u_xlat16_0 + (-vs_TEXCOORD2);\n    u_xlatb0 = u_xlat0<0.0;\n    if(u_xlatb0){discard;}\n    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"]