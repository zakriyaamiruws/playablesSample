["\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tmediump float _WaterHeight;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump float vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    vs_TEXCOORD1 = u_xlat0;\n    u_xlat1.x = _WorldSpaceCameraPos.y + (-_WaterHeight);\n    vs_TEXCOORD2 = u_xlat1.x;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec2 _Tiling;\nuniform \tmediump vec4 _WaterColor;\nuniform \tmediump vec2 _DistTiling;\nuniform \tmediump float _TextureVisibility;\nuniform \tmediump vec3 _MoveDirection;\nuniform lowp sampler2D _DistTex;\nuniform lowp sampler2D _WaterTex;\nvarying mediump float vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump vec2 u_xlat16_1;\nlowp vec2 u_xlat10_4;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat16_1.x = vs_TEXCOORD2 / u_xlat0.y;\n    u_xlat0.xy = u_xlat16_1.xx * u_xlat0.xz + (-_WorldSpaceCameraPos.xz);\n    u_xlat16_1.xy = u_xlat0.xy * _DistTiling.xy;\n    u_xlat10_4.xy = texture2D(_DistTex, u_xlat16_1.xy).xy;\n    u_xlat0.xy = u_xlat10_4.xy * vec2(2.0, 2.0) + u_xlat0.xy;\n    u_xlat16_1.xy = u_xlat0.xy + vec2(-1.0, -1.0);\n    u_xlat0.xy = (-_Time.yy) * _MoveDirection.xz + u_xlat16_1.xy;\n    u_xlat0.xy = u_xlat0.xy * _Tiling.xy;\n    u_xlat10_0 = texture2D(_WaterTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat10_0 * _TextureVisibility;\n    u_xlat16_0 = (-_WaterColor) + vec4(1.0, 1.0, 1.0, 1.0);\n    SV_Target0 = u_xlat16_1.xxxx * u_xlat16_0 + _WaterColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tmediump float _WaterHeight;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    vs_TEXCOORD1 = u_xlat0;\n    u_xlat1.x = _WorldSpaceCameraPos.y + (-_WaterHeight);\n    vs_TEXCOORD2 = u_xlat1.x;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec2 _Tiling;\nuniform \tmediump vec4 _WaterColor;\nuniform \tmediump vec2 _DistTiling;\nuniform \tmediump float _TextureVisibility;\nuniform \tmediump vec3 _MoveDirection;\nUNITY_LOCATION(0) uniform mediump sampler2D _DistTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _WaterTex;\nin mediump float vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec2 u_xlat16_1;\nmediump vec2 u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat16_1.x = vs_TEXCOORD2 / u_xlat0.y;\n    u_xlat0.xy = u_xlat16_1.xx * u_xlat0.xz + (-_WorldSpaceCameraPos.xz);\n    u_xlat16_1.xy = u_xlat0.xy * _DistTiling.xy;\n    u_xlat16_4.xy = texture(_DistTex, u_xlat16_1.xy).xy;\n    u_xlat0.xy = u_xlat16_4.xy * vec2(2.0, 2.0) + u_xlat0.xy;\n    u_xlat16_1.xy = u_xlat0.xy + vec2(-1.0, -1.0);\n    u_xlat0.xy = (-_Time.yy) * _MoveDirection.xz + u_xlat16_1.xy;\n    u_xlat0.xy = u_xlat0.xy * _Tiling.xy;\n    u_xlat16_0.x = texture(_WaterTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat16_0.x * _TextureVisibility;\n    u_xlat16_0 = (-_WaterColor) + vec4(1.0, 1.0, 1.0, 1.0);\n    SV_Target0 = u_xlat16_1.xxxx * u_xlat16_0 + _WaterColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tmediump float _WaterHeight;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump float vs_TEXCOORD2;\nvarying highp float vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nbool u_xlatb9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0.x = _WorldSpaceCameraPos.y + (-_WaterHeight);\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat16_2.x = u_xlat0.x / u_xlat3.y;\n    vs_TEXCOORD2 = u_xlat0.x;\n    u_xlat0.xyz = (-u_xlat16_2.xxx) * u_xlat3.xyz + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;\n    u_xlatb9 = _WaterHeight<u_xlat1.y;\n    u_xlat16_11 = (u_xlatb9) ? 1.0 : 0.0;\n    u_xlat16_2.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat0.x = u_xlat16_2.y * hlslcc_mtx4x4unity_MatrixVP[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixVP[0].z * u_xlat16_2.x + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixVP[2].z * u_xlat16_2.z + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + hlslcc_mtx4x4unity_MatrixVP[3].z;\n    vs_TEXCOORD3 = u_xlat0.x * unity_FogParams.z + unity_FogParams.w;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = u_xlat1;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tmediump vec2 _Tiling;\nuniform \tmediump vec4 _WaterColor;\nuniform \tmediump vec2 _DistTiling;\nuniform \tmediump float _TextureVisibility;\nuniform \tmediump vec3 _MoveDirection;\nuniform lowp sampler2D _DistTex;\nuniform lowp sampler2D _WaterTex;\nvarying mediump float vs_TEXCOORD2;\nvarying highp float vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump vec2 u_xlat16_1;\nvec3 u_xlat2;\nlowp vec2 u_xlat10_6;\nfloat u_xlat11;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat16_1.x = vs_TEXCOORD2 / u_xlat0.y;\n    u_xlat0.xy = u_xlat16_1.xx * u_xlat0.xz + (-_WorldSpaceCameraPos.xz);\n    u_xlat16_1.xy = u_xlat0.xy * _DistTiling.xy;\n    u_xlat10_6.xy = texture2D(_DistTex, u_xlat16_1.xy).xy;\n    u_xlat0.xy = u_xlat10_6.xy * vec2(2.0, 2.0) + u_xlat0.xy;\n    u_xlat16_1.xy = u_xlat0.xy + vec2(-1.0, -1.0);\n    u_xlat0.xy = (-_Time.yy) * _MoveDirection.xz + u_xlat16_1.xy;\n    u_xlat0.xy = u_xlat0.xy * _Tiling.xy;\n    u_xlat10_0 = texture2D(_WaterTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat10_0 * _TextureVisibility;\n    u_xlat16_0 = (-_WaterColor) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_0 + _WaterColor;\n    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);\n    SV_Target0.w = u_xlat16_0.w;\n    u_xlat11 = vs_TEXCOORD3;\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat2.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_FogParams;\nuniform \tvec4 _MainTex_ST;\nuniform \tmediump float _WaterHeight;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD2;\nout highp float vs_TEXCOORD3;\nout mediump vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nbool u_xlatb9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0.x = _WorldSpaceCameraPos.y + (-_WaterHeight);\n    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;\n    u_xlat3.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat16_2.x = u_xlat0.x / u_xlat3.y;\n    vs_TEXCOORD2 = u_xlat0.x;\n    u_xlat0.xyz = (-u_xlat16_2.xxx) * u_xlat3.xyz + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;\n    u_xlatb9 = _WaterHeight<u_xlat1.y;\n    u_xlat16_11 = (u_xlatb9) ? 1.0 : 0.0;\n    u_xlat16_2.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat0.x = u_xlat16_2.y * hlslcc_mtx4x4unity_MatrixVP[1].z;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixVP[0].z * u_xlat16_2.x + u_xlat0.x;\n    u_xlat0.x = hlslcc_mtx4x4unity_MatrixVP[2].z * u_xlat16_2.z + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + hlslcc_mtx4x4unity_MatrixVP[3].z;\n    vs_TEXCOORD3 = u_xlat0.x * unity_FogParams.z + unity_FogParams.w;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = u_xlat1;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_FogColor;\nuniform \tmediump vec2 _Tiling;\nuniform \tmediump vec4 _WaterColor;\nuniform \tmediump vec2 _DistTiling;\nuniform \tmediump float _TextureVisibility;\nuniform \tmediump vec3 _MoveDirection;\nUNITY_LOCATION(0) uniform mediump sampler2D _DistTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _WaterTex;\nin mediump float vs_TEXCOORD2;\nin highp float vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec2 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec2 u_xlat16_6;\nfloat u_xlat11;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat16_1.x = vs_TEXCOORD2 / u_xlat0.y;\n    u_xlat0.xy = u_xlat16_1.xx * u_xlat0.xz + (-_WorldSpaceCameraPos.xz);\n    u_xlat16_1.xy = u_xlat0.xy * _DistTiling.xy;\n    u_xlat16_6.xy = texture(_DistTex, u_xlat16_1.xy).xy;\n    u_xlat0.xy = u_xlat16_6.xy * vec2(2.0, 2.0) + u_xlat0.xy;\n    u_xlat16_1.xy = u_xlat0.xy + vec2(-1.0, -1.0);\n    u_xlat0.xy = (-_Time.yy) * _MoveDirection.xz + u_xlat16_1.xy;\n    u_xlat0.xy = u_xlat0.xy * _Tiling.xy;\n    u_xlat16_0.x = texture(_WaterTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat16_0.x * _TextureVisibility;\n    u_xlat16_0 = (-_WaterColor) + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat16_0 = u_xlat16_1.xxxx * u_xlat16_0 + _WaterColor;\n    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);\n    SV_Target0.w = u_xlat16_0.w;\n    u_xlat11 = vs_TEXCOORD3;\n    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);\n    u_xlat2.xyz = vec3(u_xlat11) * u_xlat2.xyz + unity_FogColor.xyz;\n    SV_Target0.xyz = u_xlat2.xyz;\n    return;\n}\n\n"]